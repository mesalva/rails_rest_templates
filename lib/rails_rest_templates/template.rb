app_name = "application"
app_title = app_name.classify

gem "rails_rest_templates", git: "http://github.com/ricardobaumann/rails_rest_templates"
gem "therubyracer"
gem 'rspec-rails'
 
run "bundle install"

run "rails generate rspec:install"

#environment 'config.action_mailer.default_url_options = {host: "http://yourwebsite.example.com"}', env: 'production'

environment "config.generators do |g|
      g.test_framework  :rspec, fixture: true, spec: true
      g.template_engine nil
      g.assets  false
      g.helper false
      g.stylesheets false
    end"

after_bundle do
  git :init
  git add: "."
  git commit: %Q{ -m 'Initial commit' }
end

	lib "templates/rails/scaffold_controller/controller.rb", <<-CODE
<% if namespaced? -%>
require_dependency "<%= namespaced_file_path %>/application_controller"
<% end -%>
<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  
  include RestApiConcerns

  before_action :set_<%= singular_table_name %>, only: [:show, :update, :destroy]
  
  # GET <%= route_url %>
  def index
    limit = params[:limit]||10
    offset = params[:offset]||0
    <%= plural_table_name %> = <%= class_name %>.limit(limit).offset(offset) 
    render json: <%= plural_table_name %>, status: :ok
  end
  
  # POST <%= route_url %>
  def create
    <%= singular_table_name %> = <%= orm_class.build(class_name, singular_table_name+"_params") %>
    if <%= orm_instance.save %>
      render json: <%= singular_table_name %>, status: :created 
    else
      render json: <%= singular_table_name %>.errors, status: :unprocessable_entity
    end
  end

  def show
  end

  # PATCH/PUT <%= route_url %>/1
  def update
    if @<%= orm_instance.update(singular_table_name+"_params") %>
      render json: @<%= singular_table_name %>, status: :ok
    else
      render json: @<%= singular_table_name %>.errors, status: :unprocessable_entity
    end
  end

  # DELETE <%= route_url %>/1
  def destroy
    @<%= orm_instance.destroy %>
    head :no_content
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_<%= singular_table_name %>
      @<%= singular_table_name %> = <%= orm_class.find(class_name, "params[:id]") %>
    end
    # Only allow a trusted parameter "white list" through.
    def <%= singular_table_name+"_params" %>
      <%- if attributes_names.empty? -%>
      params[:<%= singular_table_name %>]
      <%- else -%>
      params.require(:<%= singular_table_name %>).permit(<%= attributes_names.map { |name| ":"+name }.join(', ') %>)
      <%- end -%>
    end
end
<% end -%>
CODE

lib "templates/rspec/controller/controller_spec.rb", <<-CODE
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

<% module_namespacing do -%>
RSpec.describe <%= controller_class_name %>Controller, <%= type_metatag(:controller) %> do
  # This should return the minimal set of attributes required to create a valid
  # <%= class_name %>. As you add validations to <%= class_name %>, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }
  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # <%= controller_class_name %>Controller. Be sure to keep this updated too.
  let(:valid_session) { {} }

<% unless options[:singleton] -%>
  describe "GET #index" do
    it "assigns all <%= table_name.pluralize %> as @<%= table_name.pluralize %>" do
      <%= file_name %> = <%= class_name %>.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:<%= table_name %>)).to eq([<%= file_name %>])
    end
  end
<% end -%>
  describe "GET #show" do
    it "assigns the requested <%= ns_file_name %> as @<%= ns_file_name %>" do
      <%= file_name %> = <%= class_name %>.create! valid_attributes
      get :show, {:id => <%= file_name %>.to_param}, valid_session
      expect(assigns(:<%= ns_file_name %>)).to eq(<%= file_name %>)
    end
  end
  describe "GET #new" do
    it "assigns a new <%= ns_file_name %> as @<%= ns_file_name %>" do
      get :new, {}, valid_session
      expect(assigns(:<%= ns_file_name %>)).to be_a_new(<%= class_name %>)
    end
  end
  describe "GET #edit" do
    it "assigns the requested <%= ns_file_name %> as @<%= ns_file_name %>" do
      <%= file_name %> = <%= class_name %>.create! valid_attributes
      get :edit, {:id => <%= file_name %>.to_param}, valid_session
      expect(assigns(:<%= ns_file_name %>)).to eq(<%= file_name %>)
    end
  end
  describe "POST #create" do
    context "with valid params" do
      it "creates a new <%= class_name %>" do
        expect {
          post :create, {:<%= ns_file_name %> => valid_attributes}, valid_session
        }.to change(<%= class_name %>, :count).by(1)
      end
      it "assigns a newly created <%= ns_file_name %> as @<%= ns_file_name %>" do
        post :create, {:<%= ns_file_name %> => valid_attributes}, valid_session
        expect(assigns(:<%= ns_file_name %>)).to be_a(<%= class_name %>)
        expect(assigns(:<%= ns_file_name %>)).to be_persisted
      end
      it "returns created http status" do
        post :create, {:<%= ns_file_name %> => valid_attributes}, valid_session
        expect(response).to have_http_status(:created)
      end
    end
    context "with invalid params" do
      it "assigns a newly created but unsaved <%= ns_file_name %> as @<%= ns_file_name %>" do
        post :create, {:<%= ns_file_name %> => invalid_attributes}, valid_session
        expect(assigns(:<%= ns_file_name %>)).to be_a_new(<%= class_name %>)
        expect(response).to have_http_status(:unprocessable_entity)
      end

      
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested <%= ns_file_name %>" do
        <%= file_name %> = <%= class_name %>.create! valid_attributes
        put :update, {:id => <%= file_name %>.to_param, :<%= ns_file_name %> => new_attributes}, valid_session
        <%= file_name %>.reload
        skip("Add assertions for updated state")
      end
      it "assigns the requested <%= ns_file_name %> as @<%= ns_file_name %>" do
        <%= file_name %> = <%= class_name %>.create! valid_attributes
        put :update, {:id => <%= file_name %>.to_param, :<%= ns_file_name %> => valid_attributes}, valid_session
        expect(assigns(:<%= ns_file_name %>)).to eq(<%= file_name %>)
      end

      it "returns ok http status" do
        <%= file_name %> = <%= class_name %>.create! valid_attributes
        put :update, {:id => <%= file_name %>.to_param, :<%= ns_file_name %> => valid_attributes}, valid_session
        expect(response).to have_http_status(:ok)
      end
    end
    context "with invalid params" do
      it "assigns the <%= ns_file_name %> as @<%= ns_file_name %>" do
        <%= file_name %> = <%= class_name %>.create! valid_attributes
        put :update, {:id => <%= file_name %>.to_param, :<%= ns_file_name %> => invalid_attributes}, valid_session
        expect(assigns(:<%= ns_file_name %>)).to eq(<%= file_name %>)
        expect(response).to have_http_status(:unprocessable_entity)
      end
      
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested <%= ns_file_name %>" do
      <%= file_name %> = <%= class_name %>.create! valid_attributes
      expect {
        delete :destroy, {:id => <%= file_name %>.to_param}, valid_session
      }.to change(<%= class_name %>, :count).by(-1)
    end

    it "return no content http status" do
      <%= file_name %> = <%= class_name %>.create! valid_attributes
      delete :destroy, {:id => <%= file_name %>.to_param}, valid_session
      expect(response).to have_http_status(:no_content)
    end
  end

end
<% end -%>
CODE

